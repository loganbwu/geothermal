'sd',
'power',
'total_sf',
'mu_ar',
'mu_ema',
'alpha',
'ip_sf',
'lp_sf',
'wf',
paste0('h[', fp_ids, ']'),
paste0('mu_', c('Intercept', 'beta_whp', 'beta_date')),
'total_power')
n_chains = 2
burn_in = 100
n_steps = 1000
model = jags.model(textConnection(code), data, n.chains=n_chains)
update(model, burn_in)
out = coda.samples(model, n.iter=round(n_steps/n_chains), variable.names=vars)
outmatrix = as.matrix(out)
outframe = as.data.frame(outmatrix) %>%
gather(key=facility, value=value) %>%
mutate(variable=gsub("\\[.*$", "", facility), facility=parse_number(facility, na=c("NA")))
outframe$facility = factor(names(ids)[outframe$facility])
g1 = ggplot(outframe %>%
filter(facility %in% well_names, variable=="mf_pred", value>0) %>%
mutate(source = ifelse(facility %in% dry_wells, "PI time series", "Production curve")),
aes(x=value, fill=facility)) +
geom_density(aes(y=..scaled..), alpha=0.5, color=NA) + xlim(0, NA) +
facet_grid(source~.) +
theme(axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
labs(title="Posterior Well Mass Flows for 2018", x="Mass flow (T/h)", y="Scaled density", fill="Facility") +
ggsave('../media/mf_wells.png', width=24.7, height=10, units='cm')
g2 = ggplot(outframe %>% filter(variable=="beta_date") %>% filter(facility %in% special_wells[special_wells %in% liq_wells]), aes(x=value, fill=facility)) +
geom_density(alpha=0.5, color=NA) +labs(title="Posterior Decline Rate of Test Data", x="beta_date (T/h/Bar)", y="Density", fill="Facility") +
theme(axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
ggsave('../media/beta_date.png', width=24.7, height=10, units='cm')
g4 = ggplot(outframe %>% filter(facility %in% gen_names, variable=="mf_pred", value>0), aes(x=value, fill=facility)) +
geom_density(aes(y=..scaled..), alpha=0.5, color=NA) + xlim(0, NA) +
theme(axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
labs(title="Posterior Generator Mass Flows for 2018", x="Mass flow (T/h)", y="Scaled density", fill="Facility") +
ggsave('../media/mf_gens.png', width=24.7, height=10, units='cm')
g5 = ggplot(outframe %>% filter(facility %in% gen_names, variable=="power", value>0), aes(x=value, fill=facility)) +
geom_density(aes(y=..scaled..), alpha=0.5, color=NA) + xlim(0, NA) +
theme(axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
labs(title="Posterior Generator Power Output for 2018", x="Power (MW)", y="Scaled density", fill="Facility") +
ggsave('../media/power_gens.png', width=24.7, height=10, units='cm')
tb6 <- outframe %>% filter(variable=="sd") %>% select(facility, value) %>%
mutate(well=factor(facility)) %>%
group_by(well) %>%
summarise(Mean = mean(value),
`Lower 2.5%` = quantile(value, 0.025),
`Upper 97.5%` = quantile(value, 0.975)) %>%
mutate_if(is.numeric, round, 3) %>%
inner_join(regression_df %>% mutate(well=factor(names(ids)[well_id])) %>% group_by(well) %>% summarise(n=n()), by="well")
g6 = ggplot(outframe %>% filter(variable=="sd") %>% filter(facility %in% special_wells), aes(x=value, fill=facility)) +
geom_density(alpha=0.5, color=NA) + coord_cartesian(xlim=c(0, max(tb6$`Upper 97.5%`))) +
theme(axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
labs(title="Posterior Flow Deviation Estimates", x="Standard deviation", y="Density", fill="Facility") +
ggsave('../media/standard_deviation.png', width=24.7, height=10, units='cm')
ggplotly(g1, tooltip=c('facility', 'value'))
ggplotly(g2, tooltip=c('facility', 'value'))
ggplotly(g4, tooltip=c('facility', 'value'))
ggplotly(g5, tooltip=c('facility', 'value'))
ggplotly(g6, tooltip=c('facility', 'value'))
# g1; g2; g4; g5; g6
tb2 <- outframe %>% filter(variable=="beta_date") %>% select(facility, value) %>%
mutate(well=factor(facility)) %>%
group_by(well) %>%
summarise(Mean = mean(value),
`Lower 2.5%` = quantile(value, 0.025),
`Upper 97.5%` = quantile(value, 0.975)) %>%
inner_join(regression_df %>% mutate(well=factor(names(ids)[well_id])) %>% group_by(well) %>% summarise(n=n()), by="well")
tb2[tb2$well %in% special_wells,]
tb6[tb6$well %in% special_wells,]
print(xtable(tb2,
type = "latex",
caption="Credible intervals for $\\beta_\\text{date}$. $n$ is the number of test data points rather than the total points include PI data, because all PI data is from a single month, so cannot estimate the $\\beta_\\text{date}$ parameter on its own.",
label="tab:beta_date_all",
table.placement = "H",
digits = 3),
include.rownames = F,
size="\\fontsize{10pt}{10pt}\\selectfont",
file = "../media/tab_beta_date_all.tex")
print(xtable(tb2[tb2$well %in% special_wells,],
type = "latex",
caption="Credible intervals for $\\beta_\\text{date}$. $n$ is the number of test data points rather than the total points include PI data, because all PI data is from a single month, so cannot estimate the $\\beta_\\text{date}$ parameter on its own. Full table in Table \\ref{tab:beta_date_all}.",
digits = 3,
label="tab:beta_date"),
include.rownames = F,
file = "../media/tab_beta_date.tex")
print(xtable(tb2[tb6$well %in% special_wells,], type = "latex",
caption="Credible intervals for standard deviation.",
digits = 3,
label="tab:sd"),
include.rownames = F,
file = "../media/tab_sd.tex")
nrow.source = function(df, facilityname, sourcename) {
stopifnot(length(sourcename)==1)
return(nrow(df %>% filter(well==facilityname, source==sourcename)))
}
well_summaries = outframe %>%
filter(facility %in% well_names, variable=="mf_pred") %>%
group_by(facility) %>%
summarise(mean = mean(value),
sd = sd(value),
n_test = nrow.source(regression_df, unique(facility),"Well Tests"),
n_pi = nrow.source(regression_df, unique(facility), "PI Database"),
use.test = ifelse(n_test>0, "Test data", "No test data"),
use.pi = ifelse(n_pi>0, "PI data", "No PI data")) %>%
arrange(desc(sd))
well_summaries$production.curve = ifelse(well_summaries$facility %in% liq_wells, "Production curve", "Time series")
fp_summaries = list(fp14 = well_summaries %>% filter(facility %in% flows_to(censor('fp14', 'fp'))),
fp15 = well_summaries %>% filter(facility %in% flows_to(censor('fp15', 'fp'))),
fp16 = well_summaries %>% filter(facility %in% flows_to(censor('fp16', 'fp'))))
for (fp in names(fp_summaries)) {
print(xtable(fp_summaries[[fp]],
type = "latex",
caption=paste("Data methods feeding flash plant", censor(fp, 'fp')),
label=paste0("tab:well_summaries_", fp)),
table.placement = "H",
file = paste0("../media/summaries_", fp, ".tex"))
}
n_summaries = well_summaries %>%
group_by(use.pi, use.test) %>%
count()
ggplot(well_summaries, aes(x=1, y=log(sd))) +
geom_boxplot(fill='steelblue') +
geom_text(data=n_summaries, aes(x=-Inf, y=Inf, hjust=0, vjust=1, label=paste0("n=", n), family="Times New Roman")) +
facet_grid(.~ use.pi + use.test) +
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
labs(title="Differences in Production Error by Data Source", x="Production curve data source", y="log(standard deviation)") +
ggsave('../media/error_source.png', width=24.7*0.5, height=6, units='cm')
print(xtable(well_summaries %>% select(facility, mean, sd, n_test, n_pi) %>% head(), type = "latex",
caption="Upon inspection of the wells with the most variance, there is no immediate cause for high variance. This requires further investigation.",
label="tab:well_summaries"),
table.placement = "h",
file = "../media/well_summaries.tex")
hp.df <- outframe %>% filter(variable %in% c("mu_beta_date", "mu_beta_whp", "mu_Intercept"))
hp.quantiles <- hp.df %>%
group_by(variable) %>%
summarise(`Lower 2.5%` = quantile(value, 0.025),
`Upper 97.5%` = quantile(value, 0.975)) %>%
gather(key='Quantile', value='value', `Lower 2.5%`, `Upper 97.5%`)
coefplot = ggplot(hp.df, aes(x=value, fill=variable)) +
facet_wrap(~variable, nrow=3, scales = "free") +
geom_density(aes(y=..scaled..), alpha=0.5, color=NA) +
geom_vline(data=hp.quantiles, aes(xintercept=value, color=Quantile)) +
labs(title="Posterior Regression Coefficients", x="Value", y="Density", fill="Variable")
ggplotly(coefplot)
prod = as.data.frame(outmatrix) %>%
select(contains('prod')) %>%
gather(key=facility, value=value) %>%
mutate(which=parse_number(facility)) %>%
mutate(whp=data$whp_prod[which],
well = names(ids)[data$well_id_prod[which]]) %>%
rename(mf=value) %>%
group_by(well, whp) %>%
summarise(lower=quantile(mf, 0.025),
upper=quantile(mf, 0.975),
mean=mean(mf))
plotdata = regression_df %>%
filter(well_id %in% ids[production_curve_wells]) %>%
mutate(datetime = factor(as.Date(date)))
# regression plot
ggplot(prod, aes(x=whp)) +
geom_line(aes(y=mean, color=well)) +
# geom_line(data=reglines, aes(y=mf, group=datetime, lty="OLS Regression")) +
geom_ribbon(aes(ymin=lower, ymax=upper, fill=well), alpha=0.25) +
geom_point(data=plotdata, aes(y=mf, color=well, size=date, shape=source), alpha=0.5) +
labs(title="Linear Regression on Test and PI Data", x="Well-head pressure (bar)", y="Mass flow (T/h)", color="Well", shape="Data source", size="Date", fill="Well") +
coord_cartesian(xlim=c(min(plotdata$whp)*0.875,max(plotdata$whp)*1.125), ylim=c(0,max(plotdata$mf)*1.125)) +
ggsave('../media/production_curve.png', width=24.7*0.48, height=24.7*0.48, units='cm')
ts_fit = as.data.frame(outmatrix) %>%
select(contains('mf_ts')) %>%
gather() %>%
mutate(index = parse_number(key)) %>% select(-key) %>%
group_by(index) %>%
summarise(lower=quantile(value, 0.025),
upper=quantile(value, 0.975),
mean=mean(value)) %>%
cbind(ts) %>%
mutate(well = factor(names(ids[well_id_ts])),
date_numeric = date_numeric_ts)
# for AR and EWMA
actualts = drymatrix %>% as.data.frame() %>%
mutate(t = 1:nrow(drymatrix)) %>%
gather(key="facility", value="value", -t) %>%
filter(facility %in% names(ids)[ar_well_ids])
# for linear
tsplotdata = dry_df %>%
filter(well_id %in% ids[special_wells],
well_id %in% ids[ar_well_ids],
well %in% unique(actualts$facility)) %>%
mutate(datetime = factor(as.Date(date)),
facility = well)
lintsplot = ggplot(ts_fit, aes(x=date_numeric, color=well, fill=well)) +
geom_line(aes(y=mean), linetype="dashed") +
geom_ribbon(aes(ymin=lower, ymax=upper), color=NA, alpha=0.25) +
geom_line(data=tsplotdata, aes(y=mf)) +
geom_vline(aes(xintercept = max(tsplotdata$date_numeric)), linetype="dashed", color="red") +
coord_cartesian(ylim=c(0, 30)) +
labs(title=paste("Linear Time Series Regression for Selected Wells in PI"), x="Days since baseline (2000)", linetype="") +
ggsave('../media/dry_time_series.png', width=24.7, height=8, units='cm')
# experimental AR1 time series
ar_fit = as.data.frame(outmatrix) %>%
select(contains("mu_ar")) %>%
gather() %>%
mutate(t = as.numeric(str_extract(key, "(?<=\\[)(.*?)(?=,)")),
facility = names(ids)[as.numeric(str_extract(key, "(?<=,)(.*?)(?=\\])"))]) %>%
select(facility, t, value) %>%
group_by(facility, t) %>%
summarise(mean=mean(value),
lower=quantile(value, 0.025),
upper=quantile(value, 0.975))
arplot = ggplot(ar_fit %>% filter(facility %in% special_wells), aes(x=t, y=mean, fill=facility, color=facility)) +
geom_line(data=actualts %>% filter(facility %in% special_wells), aes(y=value)) +
geom_ribbon(aes(ymin=lower, ymax=upper), color=NA, alpha=0.5) +
geom_line(linetype="dashed") + coord_cartesian(ylim=c(0, 30)) +
geom_vline(aes(xintercept=max(actualts%>%drop_na()%>%pull(t))), linetype="dashed", color="red") +
labs(title="AR(1) Experiment", x="Days since first date", y="Mass flow (T/h)") +
ggsave('../media/ar_experiment.png', width=24.7, height=8, units='cm')
# experimental EMA time series
ema_fit = as.data.frame(outmatrix) %>%
select(contains("mu_ema")) %>%
gather() %>%
mutate(t = as.numeric(str_extract(key, "(?<=\\[)(.*?)(?=,)")),
facility = names(ids)[as.numeric(str_extract(key, "(?<=,)(.*?)(?=\\])"))]) %>%
select(facility, t, value) %>%
group_by(facility, t) %>%
summarise(mean=mean(value),
lower=quantile(value, 0.025),
upper=quantile(value, 0.975))
ewmaplot = ggplot(ema_fit %>% filter(facility %in% special_wells), aes(x=t, y=mean, fill=facility, color=facility)) +
geom_vline(aes(xintercept=max(actualts%>%drop_na()%>%pull(t))), linetype="dashed", color="red") +
geom_line(data=actualts %>% filter(facility %in% special_wells), aes(y=value)) +
geom_ribbon(aes(ymin=lower, ymax=upper), color=NA, alpha=0.5) +
geom_line(linetype="dashed") + coord_cartesian(ylim=c(0, 30)) +
labs(title="EWMA Experiment", x="Days since first date") +
ggsave('../media/ewma_experiment.png', width=24.7, height=8, units='cm')
# ggplotly(lintsplot)
# ggplotly(arplot)
# ggplotly(ewmaplot)
lintsplot
arplot
ewmaplot
tsgrob = grid_arrange_shared_legend(lintsplot, arplot, ewmaplot, nrow=3, ncol=1, position = "bottom")
ggsave('../media/ts_experiment.png', tsgrob, width=24.7, height=24, units='cm')
trace1 <- outframe %>%
filter(variable=='mf_pred', facility==censor('wk256', "well"))
trace2 <- outframe %>%
filter(variable=='total_power')
trace3 <- outframe %>%
filter(variable=='mu_Intercept')
traceplot = ggplot(trace1, aes(y=value, color=variable)) +
geom_line(data=trace3, aes(x=as.numeric(row.names(trace1))), alpha=0.75) +
geom_line(aes(x=as.numeric(row.names(trace1))), alpha=0.75) +
geom_line(data=trace2, aes(x=as.numeric(row.names(trace1))), alpha=0.75) +
coord_cartesian(xlim = c(max(as.numeric(row.names(trace1))-1000), max(as.numeric(row.names(trace1))))) +
labs(title="Trace Plot (Single chain)", x="Iteration", y="Parameter value", color="Variable") +
ggsave('../media/trace_plot.png', width=24.7, height=8, units='cm')
ggplotly(traceplot)
liq_fit = as.data.frame(outmatrix) %>%
select(contains('mf_fit')) %>%
gather(key='index', value='fitted') %>%
mutate(index=as.integer(parse_number(index))) %>%
group_by(index) %>%
summarise(lower=quantile(fitted, 0.025),
upper=quantile(fitted, 0.975),
Fitted=mean(fitted),
std=sd(fitted)) %>%
cbind(regression_df) %>%
mutate(`Standardised residual` = (Fitted-mf)/std,
Well = factor(names(ids[well_id])),
Observed = mf) %>%
gather(key="key", value="value", `Standardised residual`, Observed) %>%
select(Well, key, Fitted, value)
diagplot = ggplot(liq_fit, aes(x=Fitted, y=value)) +
geom_point(aes(color=Well, shape=Well)) + scale_shape_manual(values = 1:length(levels(liq_fit$Well))) +
geom_smooth(color='black') +
facet_wrap(~key, scales="free") +
geom_hline(data=data.frame(key="Standardised residual", value=c(1.96,-1.96)), aes(yintercept=value), color='red') +
geom_abline(data=data.frame(key="Observed", a = 1, b = 0), aes(slope = a, intercept=b), color='red') +
labs(title="Diagnostic Plots", x="Fitted mass flow (T/h)", y="") +
theme(legend.position = "bottom") +
guides(color=guide_legend(nrow=3, byrow=T), shape=guide_legend(nrow=3, byrow=T)) +
ggsave('../media/diagnostics.png', width=24.7, height=12, units='cm')
ggplotly(diagplot)
stdres_min = liq_fit %>% filter(key=="Standardised residual") %>% pull(value) %>% min()
stdres_max = liq_fit %>% filter(key=="Standardised residual") %>% pull(value) %>% max()
ggplot(liq_fit %>% filter(key=="Standardised residual"), aes(x=value)) +
geom_density(fill="red", alpha=0.5, color=NA) +
geom_line(data=data.frame(x=seq(stdres_min, stdres_max, length.out=100)), aes(x=x, y=dnorm(x)))
sf.df <- outframe %>%
filter(str_detect(variable, "total_sf") & value > 0) %>%
droplevels()
limits = fp_constants %>%
mutate(facility = names(ids)[fp_id]) %>%
select(facility, limit) %>%
drop_na()
limitplot = ggplot(sf.df, aes(x=value, fill=facility, color=facility)) +
facet_wrap(~facility, scales = "free_y", ncol=2) +
geom_density(alpha=0.5, color=NA) +
geom_vline(data=limits, aes(xintercept=limit), color="red") +
theme(legend.position="none",
axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
labs(title="Posterior Flash Plant Mass Flows", x="Steam flow (T/h)", y="Density", fill="Flash plant", color="Steam flow limit") +
ggsave('../media/constraints.png', width=24.7, height=10, units='cm')
ggplotly(limitplot)
incomplete.fps = unique(well_fp_map %>%
filter(is.na(well_id)) %>%
mutate(fp = names(ids)[fp_id]) %>%
pull(fp))
flow.df <- outframe %>%
filter(facility %in% fp_names) %>%
filter(str_detect(variable, "mf_pred|ip_sf|lp_sf|wf|h") & value > 0) %>%
mutate(variable=ifelse(variable=="mf_pred", "mf", variable),
variable=factor(variable, levels=c("h", "mf", "ip_sf", "lp_sf", "wf")))
comparison = fp_constants %>% select("fp", contains("verification")) %>%
rename(facility=fp) %>%
gather(key="variable", value="value", -facility) %>%
mutate(variable = gsub("^verification_", "", variable),
variable=factor(variable, levels=c("h", "mf", "ip_sf", "lp_sf", "wf"))) %>%
drop_na()
ps = flow.df %>%
left_join(comparison, by=c("facility", "variable")) %>%
mutate(greater = value.x > value.y) %>%
group_by(facility, variable) %>%
summarise(p.greater = mean(greater)) %>%
mutate(variable=factor(variable, levels=c("h", "mf", "ip_sf", "lp_sf", "wf"))) %>%
drop_na()
ggplot(flow.df %>% filter(facility %ni% incomplete.fps), aes(x=value)) +
geom_density(aes(y=..scaled.., fill=variable, color=variable), alpha=0.5, show.legend=F) +
geom_vline(data=comparison %>% filter(facility %ni% incomplete.fps), aes(xintercept=value)) +
geom_label(data=ps %>% filter(facility %ni% incomplete.fps), aes(x=-Inf, y=Inf, hjust=0, vjust=1, label=paste0("p(>x)=", p.greater), family="Times New Roman"), alpha=0.5) +
facet_grid(facility~variable, scales="free", space="free_y") +
theme(axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
labs(x="Value", y="Scaled density", title="Comparison Between Predicted FP Flows and Sample Data") +
ggsave('../media/verification.png', width=24.7, height=26, units='cm')
random_var_ix = sample.int(ncol(outmatrix), 100) # 100 random var because it takes too long
geweke.out = geweke.diag(out[,random_var_ix])
geweke.df = data.frame(Index = 1:length(unlist(geweke.out)),
z = unlist(geweke.out[1])) %>%
mutate(out = ifelse(abs(z)>1.96, T, F)) %>%
drop_na()
proportion_out = sum(geweke.df$out) / nrow(geweke.df)
ggplot(geweke.df, aes(x=Index, y=z)) +
geom_point() +
geom_hline(data=data.frame(value=c(1.96,-1.96)), aes(yintercept=value), color='red') +
labs(title=paste0("Geweke z-score. ", round(proportion_out, 2)*100, " % points lie outside the 95% confidence interval.")) +
ggsave('../media/geweke.png', width=24.7, height=8, units='cm')
gelman.out = gelman.diag(out[,c(paste0('mf_pred[', 8:9, ']'), 'beta_date[9]', 'mu_beta_whp', 'mu_beta_date', 'mu_Intercept', 'total_power')])[[1]] %>% as.data.frame()
raftery.out = raftery.diag(out[,c(paste0('mf_pred[', 8:9, ']'), 'beta_date[9]', 'mu_beta_whp', 'mu_beta_date', 'mu_Intercept', 'total_power')])
print(xtable(gelman.out, type = "latex",
caption="Select potential scale reduction factors from Gelman's diagnostic test.",
digits = 2,
label="tab:gelman"),
table.placement = "h",
file = "../media/gelman.tex")
g2 = ggplot(outframe %>% filter(variable=="beta_date") %>% filter(facility %in% special_wells[special_wells %in% liq_wells]), aes(x=value, fill=facility)) +
geom_density(alpha=0.5, color=NA) +labs(title="Posterior Decline Rate of Test Data", x="beta_date (T/h/Bar)", y="Density", fill="Facility") +
theme(axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
ggsave('../media/beta_date.png', width=24.7, height=6, units='cm')
prediction_date
g4.5 = ggplot(outframe %>% filter(facility %in% gen_names, variable %in% c("mf_pred", "power"))) +
geom_density(aes(y=..scaled..), alpha=0.5, color=NA)+ xlim(0, NA) +
facet_grid(variable ~ .) +
theme(axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
labs(title=paste("Posterior Generator States for", prediction_date), x="Value (T/h and MW)", y="Scaled density", fill="Facility") +
ggsave('../media/gens.png', width=24.7, height=10, units='cm')
g4.5 = ggplot(outframe %>% filter(facility %in% gen_names, variable %in% c("mf_pred", "power")),
aes(x=value)) +
geom_density(aes(y=..scaled..), alpha=0.5, color=NA)+ xlim(0, NA) +
facet_grid(variable ~ .) +
theme(axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
labs(title=paste("Posterior Generator States for", prediction_date), x="Value (T/h and MW)", y="Scaled density", fill="Facility") +
ggsave('../media/gens.png', width=24.7, height=10, units='cm')
outframe %>% filter(facility %in% gen_names, variable %in% c("mf_pred", "power"))
g4.5 = ggplot(outframe %>% filter(facility %in% gen_names, variable %in% c("mf_pred", "power")),
aes(x=value, fill=facility)) +
geom_density(aes(y=..scaled..), alpha=0.5, color=NA)+ xlim(0, NA) +
facet_grid(variable ~ .) +
theme(axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
labs(title=paste("Posterior Generator States for", prediction_date), x="Value (T/h and MW)", y="Scaled density", fill="Facility") +
ggsave('../media/gens.png', width=24.7, height=10, units='cm')
tsgrob4.5 = grid_arrange_shared_legend(g4, g5, nrow=1, ncol=2, position = "right")
ggsave('../media/gens.png', tsgrob4.5, width=24.7, height=10, units='cm')
tsgrob4.5 = grid_arrange_shared_legend(g4, g5, nrow=2, ncol=1, position = "right")
tsgrob4.5 = grid_arrange_shared_legend(g4, g5, nrow=2, ncol=1, position = "right")
ggsave('../media/gens.png', tsgrob4.5, width=24.7, height=10, units='cm')
g5 = ggplot(outframe %>% filter(facility %in% gen_names, variable=="power", value>0), aes(x=value, fill=facility)) +
geom_density(aes(y=..scaled..), alpha=0.5, color=NA) + xlim(0, NA) +
theme(axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
# labs(title=paste("Posterior Generator Power Output for", prediction_date), x="Power (MW)", y="Scaled density", fill="Facility") +
ggsave('../media/power_gens.png', width=24.7, height=10, units='cm')
g5 = ggplot(outframe %>% filter(facility %in% gen_names, variable=="power", value>0), aes(x=value, fill=facility)) +
geom_density(aes(y=..scaled..), alpha=0.5, color=NA) + xlim(0, NA) +
theme(axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
# labs(title=paste("Posterior Generator Power Output for", prediction_date), x="Power (MW)", y="Scaled density", fill="Facility") +
ggsave('../media/power_gens.png', width=24.7, height=10, units='cm')
tsgrob4.5 = grid_arrange_shared_legend(g4, g5, nrow=2, ncol=1, position = "right")
ggsave('../media/gens.png', tsgrob4.5, width=24.7, height=10, units='cm')
g4 = ggplot(outframe %>% filter(facility %in% gen_names, variable=="mf_pred", value>0), aes(x=value, fill=facility)) +
geom_density(aes(y=..scaled..), alpha=0.5, color=NA) + xlim(0, NA) +
theme(axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
labs(title=paste("Posterior Generator Values for", prediction_date), x="Mass flow (T/h)", y="Scaled density", fill="Facility") +
ggsave('../media/mf_gens.png', width=24.7, height=10, units='cm')
g4 = ggplot(outframe %>% filter(facility %in% gen_names, variable=="mf_pred", value>0), aes(x=value, fill=facility)) +
geom_density(aes(y=..scaled..), alpha=0.5, color=NA) + xlim(0, NA) +
theme(axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
labs(title=paste("Posterior Generator Values for", prediction_date), x="Mass flow (T/h)", y="Scaled density", fill="Facility") +
ggsave('../media/mf_gens.png', width=24.7, height=10, units='cm')
g5 = ggplot(outframe %>% filter(facility %in% gen_names, variable=="power", value>0), aes(x=value, fill=facility)) +
geom_density(aes(y=..scaled..), alpha=0.5, color=NA) + xlim(0, NA) +
theme(axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
labs(x="Power (MW)", y="Scaled density", fill="Facility") +
ggsave('../media/power_gens.png', width=24.7, height=10, units='cm')
tsgrob4.5 = grid_arrange_shared_legend(g4, g5, nrow=2, ncol=1, position = "right")
tsgrob4.5 = grid_arrange_shared_legend(g4, g5, nrow=2, ncol=1, position = "right")
ggsave('../media/gens.png', tsgrob4.5, width=24.7, height=10, units='cm')
print(xtable(tb2,
type = "latex",
caption="Credible intervals for $\\beta_\\text{date}$. $n$ is the number of test data points rather than the total points include PI data, because all PI data is from a single month, so cannot estimate the $\\beta_\\text{date}$ parameter on its own.",
label="tab:beta_date_all",
table.placement = "h",
digits = 3),
include.rownames = F,
size="\\fontsize{10pt}{10pt}\\selectfont",
file = "../media/tab_beta_date_all.tex")
print(xtable(tb2,
type = "latex",
caption="Credible intervals for $\\beta_\\text{date}$. $n$ is the number of test data points rather than the total points include PI data, because all PI data is from a single month, so cannot estimate the $\\beta_\\text{date}$ parameter on its own.",
label="tab:beta_date_all",
table.placement = "H",
digits = 3),
include.rownames = F,
size="\\fontsize{10pt}{10pt}\\selectfont",
file = "../media/tab_beta_date_all.tex")
print(xtable(tb2[tb2$well %in% special_wells,],
type = "latex",
caption="Credible intervals for $\\beta_\\text{date}$. $n$ is the number of test data points rather than the total points include PI data, because all PI data is from a single month, so cannot estimate the $\\beta_\\text{date}$ parameter on its own. Full table in Table \\ref{tab:beta_date_all}.",
digits = 3,
label="tab:beta_date"),
table.placement = "H",
include.rownames = F,
file = "../media/tab_beta_date.tex")
print(xtable(tb2[tb2$well %in% special_wells,],
type = "latex",
caption="Credible intervals for $\\beta_\\text{date}$. $n$ is the number of test data points rather than the total points include PI data, because all PI data is from a single month, so cannot estimate the $\\beta_\\text{date}$ parameter on its own. Full table in Table \\ref{tab:beta_date_all}.",
digits = 3,
label="tab:beta_date"),
table.placement = "h",
include.rownames = F,
file = "../media/tab_beta_date.tex")
print(xtable(tb2[tb2$well %in% special_wells,],
type = "latex",
caption="Credible intervals for $\\beta_\\text{date}$ in units T/h/d. $n$ is the number of test data points rather than the total points include PI data, because all PI data is from a single month, so cannot estimate the $\\beta_\\text{date}$ parameter on its own. Full table in Table \\ref{tab:beta_date_all}.",
digits = 3,
label="tab:beta_date"),
table.placement = "h",
include.rownames = F,
file = "../media/tab_beta_date.tex")
print(xtable(tb2,
type = "latex",
caption="Credible intervals for $\\beta_\\text{date}$ in units T/h/d.",
label="tab:beta_date_all",
table.placement = "H",
digits = 3),
include.rownames = F,
size="\\fontsize{10pt}{10pt}\\selectfont",
file = "../media/tab_beta_date_all.tex")
print(xtable(tb2,
type = "latex",
caption="Credible intervals for $\\beta_\\text{date}$ in units T/h/d.",
label="tab:beta_date_all",
table.placement = "H",
digits = 3),
include.rownames = F,
size="\\fontsize{11pt}{11pt}\\selectfont",
file = "../media/tab_beta_date_all.tex")
head(sf.df)
limitplot = ggplot(sf.df %>% filter(facility %ni% incomplete.fps), aes(x=value, fill=facility, color=facility)) +
facet_wrap(~facility, scales = "free_y", ncol=2) +
geom_density(alpha=0.5, color=NA) +
geom_vline(data=limits, aes(xintercept=limit), color="red") +
theme(legend.position="none",
axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
labs(title="Posterior Flash Plant Mass Flows", x="Steam flow (T/h)", y="Density", fill="Flash plant", color="Steam flow limit") +
ggsave('../media/constraints.png', width=24.7, height=10, units='cm')
ggsave('../media/gens.png', tsgrob4.5, width=24.7, height=6, units='cm')
ggplot(geweke.df, aes(x=Index, y=z)) +
geom_point() +
geom_hline(data=data.frame(value=c(1.96,-1.96)), aes(yintercept=value), color='red') +
labs(title=paste0("Geweke z-score. ", round(proportion_out, 2)*100, " % points lie outside the 95% confidence interval.")) +
ggsave('../media/geweke.png', width=24.7, height=6, units='cm')
