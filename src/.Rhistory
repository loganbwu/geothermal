Intercept[j] ~ dnorm(mu_Intercept, tau_Intercept)
beta_whp[j] ~ dnorm(mu_beta_whp, tau_beta_whp)
# beta_whp2[j] ~ dnorm(mu_beta_whp2, tau_beta_whp2)
beta_date[j] ~ dnorm(mu_beta_date, tau_beta_date)
tau[j] ~ dgamma(1e-12, 1e-12)
sd[j] <- 1/max(sqrt(tau[j]), 1e-12)
}
# fill in any missing data
for (i in 1:length(mf)) {
date_numeric_c[i] ~ dnorm(mu_date_numeric, tau_date_numeric)
}
mu_date_numeric ~ dnorm(0, 1e-12)
tau_date_numeric ~ dnorm(1e-12, 1e-12)
# set hyperparameters
mu_Intercept ~ dnorm(0, 1e-12)
mu_beta_whp ~ dnorm(0, 1e-12)
# mu_beta_whp2 ~ dnorm(0, 1e-12)
mu_beta_date ~ dnorm(0, 1e-12)
tau_Intercept ~ dgamma(1e-12, 1e-12)
tau_beta_whp ~ dgamma(1e-12, 1e-12)
# tau_beta_whp2 ~ dgamma(1e-12, 1e-12)
tau_beta_date ~ dgamma(1e-12, 1e-12)
#####################################
# production curve for verification #
#####################################
for (i in 1:length(whp_prod)) {
mu_prod[i] <- Intercept[well_id_prod[i]] + beta_whp[well_id_prod[i]] * whp_prod_c[i] + beta_date[well_id_prod[i]] * today_numeric_c
# mf_prod[i] ~ dnorm(mu_prod[i], tau[well_id_prod[i]])
mf_prod[i] <- mu_prod[i]
}
for (i in 1:length(date_numeric_ts)) {
mu_ts[i] <- Intercept[well_id_ts[i]] + beta_date[well_id_ts[i]] * date_numeric_ts[i]
mf_ts[i] ~ dnorm(mu_ts[i], tau[well_id_ts[i]])
}
#########################################################
# simple model to fill in missing FP enthalpy constants #
#########################################################
for (i in fp_ids) {
# missing fp constants
hf_ip[i] ~ dgamma(param[1], param[7])
hg_ip[i] ~ dgamma(param[2], param[8])
hfg_ip[i] ~ dgamma(param[3], param[9])
hf_lp[i] ~ dgamma(param[4], param[10])
hg_lp[i] ~ dgamma(param[5], param[11])
hfg_lp[i] ~ dgamma(param[6], param[12])
}
for (i in c(1, well_ids)) {
h[i] ~ dgamma(param[13], param[14])
whp_pred_c[i] ~ dnorm(param[15], param[16])
} # missing well constants
for (i in 1:16) { param[i] ~ dgamma(1e-12, 1e-12) }               # uniform priors
########################################
# make predictions (the stuff we want) #
########################################
mf_pred[dummy] <- 0  # dummy well
ip_sf[dummy] <- 0
lp_sf[dummy] <- 0
wf[dummy] <- 0
# use production curve
for (j in liq_well_ids) {
mf_pred[j] <- max(Intercept[j] + beta_whp[j] * whp_pred_c[j] + beta_date[j] * today_numeric_c, 0)
}
# use naive TS reg
for (j in dry_well_ids) { #dry_no_ar_well_ids) {
mf_pred[j] <- max(Intercept[j] + beta_date[j] * today_numeric_c, 0)
}
# use AR(1)
# for (j in ar_well_ids) {
#   mf_pred[j] <- mu_ar[D[1], j]
# }
for (i in fp_ids) {
mf_pred[i] <- sum(mf_pred[m[i,1:n_inflows[i]]])
h[i] <- sum(mf_pred[m[i, 1:n_inflows[i]]] * h[m[i, 1:n_inflows[i]]]) / ifelse(mf_pred[i]!=0, mf_pred[i], 1)
ip_sf[i] <- min(max((h[i] - hf_ip[i]), 0) / hfg_ip[i], 1) * mf_pred[i]
lp_sf[i] <- min(max((min(hf_ip[i], h[i]) - hf_lp[i]), 0) / hfg_lp[i], 1) * (mf_pred[i] - ip_sf[i])
total_sf[i] <- ip_sf[i] + lp_sf[i]
wf[i] <- mf_pred[i] - total_sf[i]
}
# dummy gens and actual gens
for (i in ip_gen_ids) { mf_pred[i] <- sum(ip_sf[m[i, 1:n_inflows[i]]]) }
for (i in lp_gen_ids) { mf_pred[i] <- sum(lp_sf[m[i, 1:n_inflows[i]]]) }
for (i in w_gen_ids) { mf_pred[i] <- sum(wf[m[i, 1:n_inflows[i]]]) }
for (i in gen_ids) {
mf_pred[i] <- sum(mf_pred[m[i,1:n_inflows[i]]])
power[i] <- mf_pred[i] / mu_factor[i]
mu_factor[i] ~ dunif(0.95*factor[i], 1.05*factor[i])  # uncertainty from email
}
total_power <- sum(power[gen_ids])
}
"
# cat(code, file="model.txt")
vars =  c('mf_fit',
'mf_dry_fit',
'mf_ts',
'mf_prod',
'mf_pred',
'beta_date',
'sd',
'power',
'total_sf',
'mu_ar',
'ts_ar',
'mu_ema',
'ts_ema',
'alpha',
'ip_sf',
'lp_sf',
'wf',
paste0('h[', fp_ids, ']'),
paste0('mu_', c('Intercept', 'beta_whp', 'beta_date')),
'total_power')
n_chains = 2
burn_in = 100
model = jags.model(textConnection(code), data, n.chains=n_chains)
update(model, burn_in)
out = coda.samples(model, n.iter=round(n_steps/n_chains), variable.names=vars)
outmatrix = as.matrix(out)
outframe = as.data.frame(outmatrix) %>%
gather(key=facility, value=value) %>%
mutate(variable=gsub("\\[.*$", "", facility), facility=parse_number(facility, na=c("NA")))
outframe$facility = factor(names(ids)[outframe$facility])
trace1 <- outframe %>%
filter(variable=='mf_pred', facility==censor('wk256', "well")) %>%
mutate(index = 1:nrow(.))
trace2 <- outframe %>%
filter(variable=='total_power') %>%
mutate(index = 1:nrow(.))
trace3 <- outframe %>%
filter(variable=='mu_Intercept') %>%
mutate(index = 1:nrow(.))
traceplot = ggplot(trace1, aes(x=index, y=value, color=variable)) +
geom_line(alpha=0.75) +
geom_line(alpha=0.75) +
geom_line(alpha=0.75) +
coord_cartesian(xlim = c(max(trace1$index)-1000, max(trace1$index))) +
labs(title="Trace Plot (Single chain)", x="Iteration", y="Parameter value", color="Variable")# +
# ggsave('../_media/trace_plot.png', width=24.7, height=8, units='cm')
ggplotly(traceplot)
random_var_ix = sample.int(ncol(outmatrix), 100) # 100 random var because it takes too long
geweke.out = geweke.diag(out[,random_var_ix])
geweke.df = data.frame(Index = 1:length(unlist(geweke.out)),
z = unlist(geweke.out[1])) %>%
mutate(out = ifelse(abs(z)>1.96, T, F)) %>%
drop_na()
proportion_out = sum(geweke.df$out) / nrow(geweke.df)
gewekeplot = ggplot(geweke.df, aes(x=Index, y=z)) +
geom_point() +
geom_hline(data=data.frame(value=c(1.96,-1.96)), aes(yintercept=value), color='red') +
labs(title=paste0("Geweke z-score. ", round(proportion_out, 2)*100, "% of points lie outside the 95% confidence interval."))# +
# ggsave('../_media/geweke.png', width=24.7, height=6, units='cm')
ggplotly(gewekeplot)
gelman.out = gelman.diag(out[,c(paste0('mf_pred[', 8:9, ']'), 'beta_date[9]', 'mu_beta_whp', 'mu_beta_date', 'mu_Intercept', 'total_power')])[[1]] %>% as.data.frame()
gelman.out %>% datatable(caption="Gelman-Rubin test statistics")
raftery.out = raftery.diag(out[,c(paste0('mf_pred[', 8:9, ']'), 'beta_date[9]', 'mu_beta_whp', 'mu_beta_date', 'mu_Intercept', 'total_power')])
raftery.out[[1]]
print(xtable(gelman.out, type = "latex",
caption="Select potential scale reduction factors from Gelman's diagnostic test. Below 1.1 is generally regarded as good.",
digits = 2,
label="tab:gelman"),
table.placement = "",
file = "../_media/gelman.tex")
g1 = ggplot(outframe %>%
filter(facility %in% well_names, variable=="mf_pred", value>0) %>%
mutate(source = ifelse(facility %in% dry_wells, "PI time series", "Production curve")),
aes(x=value, fill=facility)) +
geom_density(aes(y=..scaled..), alpha=0.5, color=NA) + xlim(0, NA) +
facet_grid(source~.) +
theme(axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
labs(title=paste("Posterior Well Mass Flows for", prediction_date), x="Mass flow (T/h)", y="Scaled density", fill="Facility")# +
# ggsave('../_media/mf_wells.png', width=24.7, height=8, units='cm')
ggplotly(g1, tooltip=c('facility', 'value'))
g2 = ggplot(outframe %>% filter(variable=="beta_date", facility %in% special_wells), aes(x=value, fill=facility)) +
geom_density(alpha=0.5, color=NA) +labs(title="Posterior Decline Rate of Test Data", x="beta_date (T/h/Bar)", y="Density", fill="Facility") +
theme(axis.text.y=element_blank(),
axis.ticks.y=element_blank())# +
# ggsave('../_media/beta_date.png', width=24.7, height=6, units='cm')
ggplotly(g2, tooltip=c('facility', 'value'))
g4 = ggplot(outframe %>% filter(facility %in% gen_names, variable=="mf_pred", value>0), aes(x=value, fill=facility)) +
geom_density(aes(y=..scaled..), alpha=0.5, color=NA) + xlim(0, NA) +
theme(axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
labs(title=paste("Posterior Generator Values for", prediction_date), x="Mass flow (T/h)", y="Scaled density", fill="Facility")# +
# ggsave('../_media/mf_gens.png', width=24.7, height=10, units='cm')
ggplotly(g4, tooltip=c('facility', 'value'))
g5.actual = data.frame(facility = c("WRK", "THI", "POI", "BIN"),
value = c(121.73567, 172.18096, 51.53028, 9.98687))
g5 = ggplot(outframe %>% filter(facility %in% gen_names, variable=="power", value>0), aes(x=value, fill=facility)) +
geom_density(aes(y=..scaled..), alpha=0.5, color=NA) + xlim(0, NA) +
geom_vline(data=g5.actual, aes(xintercept=value, color=facility)) +
theme(axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
labs(x="Power (MW)", y="Scaled density", fill="Facility")# +
# ggsave('../_media/power_gens.png', width=24.7, height=10, units='cm')
ggplotly(g5, tooltip=c('facility', 'value'))
# tsgrob4.5 = grid_arrange_shared_legend(g4, g5, nrow=2, ncol=1, position = "right")
# ggsave('../_media/gens.png', tsgrob4.5, width=24.7, height=6, units='cm')
tb6 <- outframe %>% filter(variable=="sd") %>% select(facility, value) %>%
mutate(well=factor(facility)) %>%
group_by(well) %>%
summarise(Mean = mean(value),
`Lower 2.5%` = quantile(value, 0.025),
`Upper 97.5%` = quantile(value, 0.975)) %>%
mutate_if(is.numeric, round, 3) %>%
inner_join(regression_df %>% mutate(well=factor(names(ids)[well_id])) %>% group_by(well) %>% summarise(n=n()), by="well")
g6 = ggplot(outframe %>% filter(variable=="sd") %>% filter(facility %in% special_wells), aes(x=value, fill=facility)) +
geom_density(alpha=0.5, color=NA) + coord_cartesian(xlim=c(0, max(tb6$`Upper 97.5%`))) +
theme(axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
labs(title="Posterior Flow Deviation Estimates", x="Standard deviation", y="Density", fill="Facility")# +
# ggsave('../_media/standard_deviation.png', width=24.7, height=10, units='cm')
ggplotly(g6, tooltip=c('facility', 'value'))
nrow.source = function(df, facilityname, sourcename) {
stopifnot(length(sourcename)==1)
return(nrow(df %>% filter(well==facilityname, source==sourcename)))
}
well_summaries = outframe %>%
filter(facility %in% well_names, variable=="mf_pred") %>%
group_by(facility) %>%
summarise(mean = mean(value),
sd = sd(value),
n_test = nrow.source(regression_df, unique(facility),"Well Tests"),
n_pi = nrow.source(regression_df, unique(facility), "PI Database"),
use.test = ifelse(n_test>0, "Test data", "No test data"),
use.pi = ifelse(n_pi>0, "PI data", "No PI data")) %>%
arrange(desc(sd))
well_summaries$production.curve = ifelse(well_summaries$facility %in% liq_wells, "Production curve", "Time series")
fp_summaries = list(fp14 = well_summaries %>% filter(facility %in% flows_to(censor('fp14', 'fp'))),
fp15 = well_summaries %>% filter(facility %in% flows_to(censor('fp15', 'fp'))),
fp16 = well_summaries %>% filter(facility %in% flows_to(censor('fp16', 'fp'))))
for (fp in names(fp_summaries)) {
print(xtable(fp_summaries[[fp]] %>% select(-c(use.test, use.pi, production.curve)),
type = "latex",
caption=paste("Data methods feeding flash plant", censor(fp, 'fp')),
label=paste0("tab:well_summaries_", fp)),
table.placement = "H",
file = paste0("../_media/summaries_", fp, ".tex"))
}
n_summaries = well_summaries %>%
group_by(use.pi, use.test) %>%
count()
sourceplot = ggplot(well_summaries, aes(x=1, y=log(sd))) +
geom_boxplot(fill='steelblue') +
geom_label(data=n_summaries, aes(x=-Inf, y=-Inf, hjust=0, vjust=0, label=paste0("n=", n), family="Times New Roman"), label.size=0, fill='white') +
facet_grid(.~ use.pi + use.test) +
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
labs(title="Differences in Production Error by Data Source", x="Production curve data source", y="log(standard deviation)")# +
# ggsave('../_media/error_source.png', width=24.7*0.5, height=6, units='cm')
ggplotly(sourceplot)
sourcetab = well_summaries %>%
select(facility, mean, sd, n_test, n_pi) %>%
mutate(error.coef = sd/mean)
print(xtable(sourcetab %>% head(), type = "latex",
caption="Upon inspection of the wells with the most variance, there is no immediate cause for high variance. This requires further investigation.",
label="tab:well_summaries"),
table.placement = "h",
file = "../_media/well_summaries.tex")
sourcetab %>% datatable(caption = "Production errors and data sources")
prod = as.data.frame(outmatrix) %>%
select(contains('prod')) %>%
gather(key=facility, value=value) %>%
mutate(which=parse_number(facility)) %>%
mutate(whp=data$whp_prod[which],
well = names(ids)[data$well_id_prod[which]]) %>%
rename(mf=value) %>%
group_by(well, whp) %>%
summarise(lower=quantile(mf, 0.025),
upper=quantile(mf, 0.975),
mean=mean(mf))
plotdata = regression_df %>%
filter(well_id %in% ids[production_curve_wells]) %>%
mutate(datetime = factor(as.Date(date))) %>%
mutate(source = factor(source, levels=c("Well Tests", "PI Database")))
# regression plot
regplot = ggplot(prod, aes(x=whp)) +
geom_line(aes(y=mean, color=well)) +
geom_ribbon(aes(ymin=lower, ymax=upper, fill=well), alpha=0.25) +
geom_point(data=plotdata, aes(y=mf, color=well, size=date, shape=source), alpha=0.5) +
labs(title="Linear Regression on Test and PI Data", x="Well-head pressure (bar)", y="Mass flow (T/h)", color="Well", shape="Data source", size="Date", fill="Well") +
coord_cartesian(xlim=c(min(plotdata$whp)*0.9,max(plotdata$whp)*1.1), ylim=c(0,max(plotdata$mf)*1.1))# +
# ggsave('../_media/production_curve.png', width=24.7*0.48, height=24.7*0.48, units='cm')
ggplotly(regplot)
tsplotwells = ar_wells
ts_fit = as.data.frame(outmatrix) %>%
select(contains('mf_ts')) %>%
gather() %>%
mutate(index = parse_number(key)) %>% select(-key) %>%
group_by(index) %>%
summarise(lower=quantile(value, 0.025),
upper=quantile(value, 0.975),
mean=mean(value)) %>%
cbind(ts) %>%
mutate(well = factor(names(ids[well_id_ts])),
date_numeric = date_numeric_ts)
# actual observations
tsplotdata = dry_df %>%
filter(well_id %in% ids[tsplotwells]) %>%
mutate(datetime = factor(as.Date(date)),
facility = well)
# experimental AR1 time series
ar_fit = as.data.frame(outmatrix) %>%
select(contains("mu_ar")) %>%
gather() %>%
mutate(date_numeric = as.numeric(str_extract(key, "(?<=\\[)(.*?)(?=,)")) + min(dry_df$date_numeric) - 1,
facility = names(ids)[as.numeric(str_extract(key, "(?<=,)(.*?)(?=\\])"))]) %>%
select(facility, date_numeric, value) %>%
group_by(facility, date_numeric) %>%
summarise(mean=mean(value),
lower=quantile(value, 0.025),
upper=quantile(value, 0.975)) %>%
filter(facility %in% tsplotwells)
# experimental EMA time series
ewma_fit = as.data.frame(outmatrix) %>%
select(contains("mu_ema")) %>%
gather() %>%
mutate(date_numeric = as.numeric(str_extract(key, "(?<=\\[)(.*?)(?=,)")) + min(dry_df$date_numeric) - 1,
facility = names(ids)[as.numeric(str_extract(key, "(?<=,)(.*?)(?=\\])"))]) %>%
select(facility, date_numeric, value) %>%
group_by(facility, date_numeric) %>%
summarise(mean=mean(value),
lower=quantile(value, 0.025),
upper=quantile(value, 0.975)) %>%
filter(facility %in% tsplotwells)
# find plot limits
tsmax = max(c(ts_fit$upper, ar_fit$upper, ewma_fit$upper))
lintsplot = ggplot(ts_fit, aes(x=date_numeric, color=well, fill=well)) +
geom_line(aes(y=mean), linetype="dashed") +
geom_ribbon(aes(ymin=lower, ymax=upper), color=NA, alpha=0.25) +
geom_line(data=tsplotdata, aes(y=mf)) +
geom_vline(aes(xintercept = max(tsplotdata$date_numeric)), linetype="dashed", color="red") +
coord_cartesian(ylim=c(0, 60)) +
labs(title=paste("Linear Time Series Regression for Selected Wells in PI"), x="Days since baseline (2000)", linetype="")# +
# ggsave('../_media/dry_time_series.png', width=24.7, height=8, units='cm')
arplot = ggplot(ar_fit %>% filter(facility %in% tsplotwells), aes(x=date_numeric, y=mean, fill=facility, color=facility)) +
geom_line(data=tsplotdata, aes(y=mf)) +
geom_ribbon(aes(ymin=lower, ymax=upper), color=NA, alpha=0.5) +
geom_line(linetype="dashed") + coord_cartesian(ylim=c(0, 60)) +
geom_vline(aes(xintercept = max(tsplotdata$date_numeric)), linetype="dashed", color="red") +
labs(title="AR(1) Experiment", x="Days since first date", y="Mass flow (T/h)") +
ggsave('../_media/ar_experiment.png', width=24.7, height=8, units='cm')
ewmaplot = ggplot(ewma_fit, aes(x=date_numeric, y=mean, fill=facility, color=facility)) +
geom_line(data=tsplotdata, aes(y=mf)) +
geom_ribbon(aes(ymin=lower, ymax=upper), color=NA, alpha=0.5) +
geom_line(linetype="dashed") + coord_cartesian(ylim=c(0, 60)) +
geom_vline(aes(xintercept = max(tsplotdata$date_numeric)), linetype="dashed", color="red") +
labs(title="EWMA Experiment", x="Days since first date")# +
# ggsave('../_media/ewma_experiment.png', width=24.7, height=8, units='cm')
ggplotly(lintsplot)
ggplotly(arplot)
ggplotly(ewmaplot)
tsgrob = grid_arrange_shared_legend(lintsplot, arplot, ewmaplot, nrow=3, ncol=1, position = "bottom")
tsgrob
# ggsave('../_media/ts_experiment.png', tsgrob, width=24.7, height=24, units='cm')
liq_fit = as.data.frame(outmatrix) %>%
select(contains('mf_fit')) %>%
gather(key='index', value='fitted') %>%
mutate(index=as.integer(parse_number(index))) %>%
group_by(index) %>%
summarise(lower=quantile(fitted, 0.025),
upper=quantile(fitted, 0.975),
Fitted=mean(fitted),
std=sd(fitted)) %>%
cbind(regression_df) %>%
mutate(`Standardised residual` = (Fitted-mf)/std,
Well = factor(names(ids[well_id])),
Observed = mf) %>%
gather(key="key", value="value", `Standardised residual`, Observed) %>%
select(Well, key, Fitted, value, source)
diagplot = ggplot(liq_fit, aes(x=Fitted, y=value)) +
geom_point(aes(color=Well, shape=Well)) + scale_shape_manual(values = rep_len(1:25, length(unique(liq_fit$Well)))) +
geom_smooth(color='black') +
facet_wrap(~key, scales="free") +
geom_hline(data=data.frame(key="Standardised residual", value=c(1.96,-1.96)), aes(yintercept=value), color='red') +
geom_abline(data=data.frame(key="Observed", a = 1, b = 0), aes(slope = a, intercept=b), color='red') +
# coord_cartesian(ylim=c(-4, 4)) +
labs(title="Diagnostic Plots", x="Fitted mass flow (T/h)", y="") +
theme(legend.position = "bottom") +
guides(color=guide_legend(nrow=3, byrow=T), shape=guide_legend(nrow=3, byrow=T))# +
# ggsave('../_media/diagnostics.png', width=24.7, height=12, units='cm')
ggplotly(diagplot)
selectwells = liq_fit %>% group_by(Well, key) %>% summarise(fittedsd = sd(Fitted)) %>%
arrange(desc(fittedsd)) %>% head(56*2) %>% pull(Well)
observedplot = ggplot(liq_fit %>% filter(key=="Observed", Well %in% selectwells), aes(x=Fitted, y=value)) +
geom_point(aes(color=source), alpha=0.5) +
geom_smooth(color=NA, alpha=0.5) +
facet_wrap(~Well, scales="free") +
geom_abline(data=data.frame(key="Observed", a = 1, b = 0), aes(slope = a, intercept=b)) +
labs(title="Linear Regression Fit Plots Per Well", x="Fitted mass flow (T/h)", y="Observed mass flow (T/h)", color="Data source") +
theme(legend.position = "bottom")# +
# guides(color=guide_legend(nrow=3, byrow=T), shape=guide_legend(nrow=3, byrow=T)) +
# ggsave('../_media/observed.png', width=24.7, height=24.7, units='cm')
stdresplot = ggplot(liq_fit %>% filter(key=="Standardised residual", Well %in% selectwells), aes(x=Fitted, y=value)) +
geom_point(aes(color=source), alpha=0.5) +
geom_smooth(color=NA, alpha=0.5) +
facet_wrap(~Well, scales="free_x") +
geom_hline(data=data.frame(key="Standardised residual", value=c(1.96,-1.96)), aes(yintercept=value), color='red') +
# geom_abline(data=data.frame(key="Observed", a = 1, b = 0), aes(slope = a, intercept=b), color='red') +
labs(title="Linear Regression Residual Plots Per Well", x="Fitted mass flow (T/h)", y="Standardised residual", color="Data source") +
coord_cartesian(ylim=c(-5, 5)) + theme(legend.position="bottom")# +
# guides(color=guide_legend(nrow=3, byrow=T), shape=guide_legend(nrow=3, byrow=T)) +
# ggsave('../_media/stdres.png', width=24.7, height=24.7, units='cm')
ggplotly(observedplot)
ggplotly(stdresplot)
# stdres_min = liq_fit %>% filter(key=="Standardised residual") %>% pull(value) %>% min()
# stdres_max = liq_fit %>% filter(key=="Standardised residual") %>% pull(value) %>% max()
# ggplot(liq_fit %>% filter(key=="Standardised residual"), aes(x=value)) +
#   geom_density(fill="red", alpha=0.5, color=NA) +
#   geom_line(data=data.frame(x=seq(stdres_min, stdres_max, length.out=100)), aes(x=x, y=dnorm(x)))
sf.df <- outframe %>%
filter(str_detect(variable, "total_sf") & value > 0) %>%
droplevels()
limits = fp_constants %>%
mutate(facility = names(ids)[fp_id]) %>%
select(facility, limit) %>%
drop_na()
p.limits = sf.df %>%
left_join(limits, by=c("facility")) %>%
mutate(greater = value > limit) %>%
group_by(facility) %>%
summarise(p.greater = mean(greater)) %>%
drop_na()
limitplot = ggplot(sf.df %>% filter(facility %ni% incomplete.fps), aes(x=value, fill=facility)) +
facet_wrap(~facility, scales = "free_y", ncol=2) +
geom_density(alpha=0.5, color=NA) +
geom_vline(data=limits, aes(xintercept=limit), color="red") +
geom_label(data=p.limits %>% filter(facility %ni% incomplete.fps), aes(x=-Inf, y=Inf, hjust=0, vjust=1, label=paste0("p(>lim)=", p.greater), family="Times New Roman"), color="black", label.size=0, fill='white') +
theme(legend.position="none",
axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
labs(title="Posterior Flash Plant Mass Flows", x="Steam flow (T/h)", y="Density", fill="Flash plant", color="Steam flow limit")# +
# ggsave('../_media/constraints.png', width=24.7, height=10, units='cm')
ggplotly(limitplot)
flow.df <- outframe %>%
filter(facility %in% fp_names) %>%
filter(str_detect(variable, "mf_pred|ip_sf|lp_sf|wf") & value > 0) %>%
mutate(variable=ifelse(variable=="mf_pred", "mf", variable),
variable=factor(variable, levels=c("mf", "ip_sf", "lp_sf", "wf")))
comparison = fp_constants %>% select("fp", contains("verification")) %>%
rename(facility=fp) %>%
gather(key="variable", value="value", -facility) %>%
mutate(variable = gsub("^verification_", "", variable),
variable=factor(variable, levels=c("mf", "ip_sf", "lp_sf", "wf"))) %>%
drop_na()
ps = flow.df %>%
left_join(comparison, by=c("facility", "variable")) %>%
mutate(greater = value.x > value.y) %>%
group_by(facility, variable) %>%
summarise(p.greater = mean(greater)) %>%
mutate(variable=factor(variable, levels=c("mf", "ip_sf", "lp_sf", "wf"))) %>%
drop_na()
verificationplot = ggplot(flow.df %>% filter(facility %ni% incomplete.fps), aes(x=value)) +
geom_density(aes(y=..scaled.., fill=variable, color=variable), alpha=0.5, show.legend=F) +
geom_vline(data=comparison %>% filter(facility %ni% incomplete.fps), aes(xintercept=value)) +
geom_label(data=ps %>% filter(facility %ni% incomplete.fps), aes(x=-Inf, y=Inf, hjust=0, vjust=1, label=paste0("p(>x)=", p.greater), family="Times New Roman"), label.size=0) +
facet_grid(facility~variable, scales="free", space="free_y") +
theme(axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
labs(x="Value", y="Scaled density", title="Comparison Between Predicted FP Flows and Sample Data")# +
# ggsave('../_media/verification.png', width=24.7, height=20, units='cm')
ggplotly(verificationplot)
nrow.source = function(df, facilityname, sourcename) {
return(nrow(df %>% filter(well==facilityname, source==sourcename)))
}
well_summaries = outframe %>%
filter(facility %in% well_names, variable=="mf_pred") %>%
group_by(facility) %>%
summarise(mean = mean(value),
sd = sd(value),
n_test = nrow.source(regression_df, unique(facility),"Well Tests"),
n_pi = nrow.source(regression_df, unique(facility), "PI Database"),
use.test = ifelse(n_test>0, "Test data", "No test data"),
use.pi = ifelse(n_pi>0, "PI data", "No PI data")) %>%
arrange(desc(sd))
well_summaries$production.curve = ifelse(well_summaries$facility %in% liq_wells, "Production curve", "Time series")
fp_summaries = list(fp14 = well_summaries %>% filter(facility %in% flows_to(censor('fp14', 'fp'))),
fp15 = well_summaries %>% filter(facility %in% flows_to(censor('fp15', 'fp'))),
fp16 = well_summaries %>% filter(facility %in% flows_to(censor('fp16', 'fp'))))
for (fp in names(fp_summaries)) {
print(xtable(fp_summaries[[fp]] %>% select(-c(use.test, use.pi, production.curve)),
type = "latex",
caption=paste("Data methods feeding flash plant", censor(fp, 'fp')),
label=paste0("tab:well_summaries_", fp)),
table.placement = "H",
file = paste0("../_media/summaries_", fp, ".tex"))
}
n_summaries = well_summaries %>%
group_by(use.pi, use.test) %>%
count()
sourceplot = ggplot(well_summaries, aes(x=1, y=log(sd))) +
geom_boxplot(fill='steelblue') +
geom_label(data=n_summaries, aes(x=-Inf, y=-Inf, hjust=0, vjust=0, label=paste0("n=", n), family="Times New Roman"), label.size=0, fill='white') +
facet_grid(.~ use.pi + use.test) +
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
labs(title="Differences in Production Error by Data Source", x="Production curve data source", y="log(standard deviation)")# +
# ggsave('../_media/error_source.png', width=24.7*0.5, height=6, units='cm')
ggplotly(sourceplot)
sourcetab = well_summaries %>%
select(facility, mean, sd, n_test, n_pi) %>%
mutate(error.coef = sd/mean)
print(xtable(sourcetab %>% head(), type = "latex",
caption="Upon inspection of the wells with the most variance, there is no immediate cause for high variance. This requires further investigation.",
label="tab:well_summaries"),
table.placement = "h",
file = "../_media/well_summaries.tex")
sourcetab %>% datatable(caption = "Production errors and data sources")
nrow(regression_df)
nrow(dry_df)
object.size(outmatrix)
unlink('index_cache', recursive = TRUE)
ncol(outmatrix)
