ggsave('../media/beta_date.png', width=6, height=4, units='in')
g3 = ggplot(outframe %>% filter(facility %in% fp_names, variable=="mf_pred", value>0), aes(x=value, fill=facility)) +
geom_density(aes(y=..scaled..), alpha=0.5, color=NA) + xlim(0, NA) +
labs(title="Posterior Flash Plant Mass Flows for 2018", x="Mass flow")
g4 = ggplot(outframe %>% filter(facility %in% gen_names, variable=="mf_pred", value>0), aes(x=value, fill=facility)) +
geom_density(aes(y=..scaled..), alpha=0.5, color=NA) + xlim(0, NA) +
labs(title="Posterior Generator Mass Flows for 2018", x="Mass flow", y="Scaled density", fill="Facility") +
ggsave('../media/mf_gens.png', width=6, height=4, units='in')
g5 = ggplot(outframe %>% filter(facility %in% gen_names, variable=="power", value>0), aes(x=value, fill=facility)) +
geom_density(aes(y=..scaled..), alpha=0.5, color=NA) + xlim(0, NA) +
labs(title="Posterior Generator Power Output for 2018", x="Power", y="Scaled density", fill="Facility") +
ggsave('../media/power_gens.png', width=6, height=4, units='in')
tb6 <- outframe %>% filter(variable=="sd") %>% select(facility, value) %>%
mutate(well=factor(facility)) %>%
group_by(well) %>%
summarise(Mean = mean(value),
`Lower 2.5%` = quantile(value, 0.025),
`Upper 97.5%` = quantile(value, 0.975)) %>%
mutate_if(is.numeric, round, 3) %>%
inner_join(regression_df %>% mutate(well=factor(names(ids)[well_id])) %>% group_by(well) %>% summarise(n=n()))
g6 = ggplot(outframe %>% filter(variable=="sd") %>% filter(facility %in% special_wells), aes(x=value, fill=facility)) +
geom_density(alpha=0.5, color=NA) + coord_cartesian(xlim=c(0, max(tb6$`Upper 97.5%`))) +
labs(title="Posterior Flow Deviation Estimates", x="Standard deviation", y="Density", fill="Facility") +
ggsave('../media/standard_deviation.png', width=6, height=4, units='in')
ggplotly(g1, tooltip=c('facility', 'value'))
ggplotly(g2, tooltip=c('facility', 'value'))
ggplotly(g3, tooltip=c('facility', 'value'))
ggplotly(g4, tooltip=c('facility', 'value'))
ggplotly(g5, tooltip=c('facility', 'value'))
ggplotly(g6, tooltip=c('facility', 'value'))
tb2 <- outframe %>% filter(variable=="beta_date") %>% select(facility, value) %>%
mutate(well=factor(facility)) %>%
group_by(well) %>%
summarise(Mean = mean(value),
`Lower 2.5%` = quantile(value, 0.025),
`Upper 97.5%` = quantile(value, 0.975)) %>%
mutate_if(is.numeric, round, 3) %>%
inner_join(regression_df %>% mutate(well=factor(names(ids)[well_id])) %>% group_by(well) %>% summarise(n=n()))
tb2[tb2$well %in% special_wells,] %>% knitr::kable()
tb6[tb6$well %in% special_wells,] %>% knitr::kable()
hp.df <- outframe %>% filter(str_detect(variable, 'mu_'))
hp.quantiles <- hp.df %>%
group_by(variable) %>%
summarise(`Lower 2.5%` = quantile(value, 0.025),
`Upper 97.5%` = quantile(value, 0.975)) %>%
gather(key='Quantile', value='value', `Lower 2.5%`, `Upper 97.5%`)
ggplot(hp.df, aes(x=value, fill=variable)) +
facet_wrap(~variable, nrow=3, scales = "free") +
geom_density(aes(y=..scaled..), alpha=0.5, color=NA) +
geom_vline(data=hp.quantiles, aes(xintercept=value, color=Quantile)) +
labs(title="Posterior Regression Coefficients", x="Value", y="Density", fill="Variable")
prod = as.data.frame(outmatrix) %>%
select(contains('prod')) %>%
gather(key=facility, value=value) %>%
mutate(which=parse_number(facility)) %>%
mutate(whp=data$whp_prod[which]) %>%
rename(mf=value) %>%
group_by(whp) %>%
summarise(lower=quantile(mf, 0.025),
upper=quantile(mf, 0.975),
mean=mean(mf))
plotdata = regression_df %>%
filter(well_id==ids[production_curve_well]) %>%
mutate(datetime = factor(as.Date(date))) %>%
# group_by(datetime) %>%
# filter(n()>2) %>%
mutate(mf2 = mf^2)
whp = seq(0, 16.5, 0.001)
mylm = lm(mf ~ as.numeric(datetime) + whp, data=plotdata)
datetime = seq(min(as.numeric(plotdata$datetime)), max(as.numeric(plotdata$datetime)), length.out=6)
reglines = expand.grid(datetime=datetime, whp=whp)
reglines$mf <- unname(predict(mylm, reglines))
# mylm = lm(mf2 ~ as.numeric(datetime) * I(whp^2) + as.numeric(datetime) , data=plotdata)
# reglines = expand.grid(datetime=datetime, whp=whp)
# reglines$mf2 <- unname(predict(mylm, reglines))
# reglines = reglines %>% filter(mf2>=0)
# reglines$mf <- sqrt(reglines$mf2)
ggplot(prod, aes(x=whp)) +
geom_line(aes(y=mean, lty="Bayesian Regression"), color='red') +
geom_line(data=reglines, aes(y=mf, group=datetime, lty="OLS Regression")) +
geom_ribbon(aes(ymin=lower, ymax=upper), alpha=0.25, fill='red') +
geom_point(data=plotdata, aes(y=mf, color=date)) +
labs(title="Fitted Production Curve for WK255", x="Well-head pressure (bar)", y="Mass flow (T/d)", color="Date", linetype="") +
coord_cartesian(xlim=c(8,16), ylim=c(0,750)) +
ggsave('../media/production_curve.png', width=6, height=4, units='in')
trace1 <- outframe %>%
filter(variable=='mf_pred' & facility=='wk256')
trace2 <- outframe %>%
filter(variable=='total_power')
trace3 <- outframe %>%
filter(variable=='mu_Intercept')
ggplot(trace1, aes( y=value, color=variable)) +
geom_line(aes(x=as.numeric(row.names(trace1)))) +
geom_line(data=trace2, aes(x=as.numeric(row.names(trace1)))) +
geom_line(data=trace3, aes(x=as.numeric(row.names(trace1)))) +
labs(title="Trace Plots (Single chain)", x="Iteration", y="Node value", color="Variable") +
ggsave('../media/trace_plots.png', width=6, height=4, units='in')
fit = as.data.frame(outmatrix) %>%
select(contains('mf_fit')) %>%
gather(key='index', value='fitted') %>%
mutate(index=as.integer(parse_number(index))) %>%
group_by(index) %>%
summarise(lower=quantile(fitted, 0.025),
upper=quantile(fitted, 0.975),
Fitted=mean(fitted),
std=sd(fitted)) %>%
cbind(regression_df) %>%
mutate(`Standardised residual` = (Fitted-mf)/std,
Well = factor(names(ids[well_id])),
Observed = mf) %>%
gather(key="key", value="value", `Standardised residual`, Observed, )
ggplot(fit, aes(x=Fitted, y=value)) +
geom_point(aes(color=Well, shape=Well)) + scale_shape_manual(values = 1:length(levels(fit$Well))) +
geom_smooth(color='black') +
facet_grid(key~., scales="free_y", switch="y") +
geom_hline(data=data.frame(key="Standardised residual", value=c(1.96,-1.96)), aes(yintercept=value), color='red') +
labs(title="Diagnostic Plots", y="") +
ggsave('../media/diagnostics.png', width=6, height=4, units='in')
geweke.diag(out, 0.5, 0.5)
gelman.diag(out[,c(paste0('mf_pred[', 2:5, ']'), 'mu_Intercept', 'total_power')])[[1]] %>% as.data.frame() %>% round(2)
raftery.diag(out[,c(paste0('mf_pred[', 2:5, ']'), 'mu_Intercept', 'total_power')])
?TeX
ggplot(hp.df, aes(x=value, fill=TeX(variable))) +
facet_wrap(~variable, nrow=3, scales = "free") +
geom_density(aes(y=..scaled..), alpha=0.5, color=NA) +
geom_vline(data=hp.quantiles, aes(xintercept=value, color=Quantile)) +
labs(title="Posterior Regression Coefficients", x="Value", y="Density", fill="Variable")
trace1 <- outframe %>%
filter(variable=='mf_pred' & facility=='wk256')
trace2 <- outframe %>%
filter(variable=='total_power')
trace3 <- outframe %>%
filter(variable=='mu_Intercept')
ggplot(trace1, aes( y=value, color=TeX(variable))) +
geom_line(aes(x=as.numeric(row.names(trace1)))) +
geom_line(data=trace2, aes(x=as.numeric(row.names(trace1)))) +
geom_line(data=trace3, aes(x=as.numeric(row.names(trace1)))) +
labs(title="Trace Plots (Single chain)", x="Iteration", y="Node value", color="Variable") +
ggsave('../media/trace_plots.png', width=6, height=4, units='in')
ggplot(trace1, aes( y=value, color=TeX(variable))) +
geom_line(aes(x=as.numeric(row.names(trace1)))) +
geom_line(data=trace2, aes(x=as.numeric(row.names(trace1)))) +
geom_line(data=trace3, aes(x=as.numeric(row.names(trace1)))) +
labs(title="Trace Plots (Single chain)", x="Iteration", y="Node value", color="Variable") +
ggsave('../media/trace_plots.png', width=6, height=4, units='in') %>% ggplotly()
ggplot(trace1, aes( y=value, color=variable)) +
geom_line(aes(x=as.numeric(row.names(trace1)))) +
geom_line(data=trace2, aes(x=as.numeric(row.names(trace1)))) +
geom_line(data=trace3, aes(x=as.numeric(row.names(trace1)))) +
labs(title="Trace Plots (Single chain)", x="Iteration", y="Node value", color="Variable") +
ggsave('../media/trace_plots.png', width=6, height=4, units='in')
g2 = ggplot(outframe %>% filter(variable=="beta_date") %>% filter(facility %in% special_wells), aes(x=value, fill=facility)) +
geom_density(alpha=0.5, color=NA) +labs(title="Posterior Decline Rate of Test Data", x=Tex("\beta_{Date}"), y="Density", fill="Facility") +
ggsave('../media/beta_date.png', width=6, height=4, units='in')
g2 = ggplot(outframe %>% filter(variable=="beta_date") %>% filter(facility %in% special_wells), aes(x=value, fill=facility)) +
geom_density(alpha=0.5, color=NA) +labs(title="Posterior Decline Rate of Test Data", x=TeX("\beta_{Date}"), y="Density", fill="Facility")# +
ggplotly(g2, tooltip=c('facility', 'value'))
library(latex2exp)
g2 = ggplot(outframe %>% filter(variable=="beta_date") %>% filter(facility %in% special_wells), aes(x=value, fill=facility)) +
geom_density(alpha=0.5, color=NA) +labs(title="Posterior Decline Rate of Test Data", x=TeX("\beta_{Date}"), y="Density", fill="Facility")# +
ggplotly(g2, tooltip=c('facility', 'value'))
g2 = ggplot(outframe %>% filter(variable=="beta_date") %>% filter(facility %in% special_wells), aes(x=value, fill=facility)) +
geom_density(alpha=0.5, color=NA) +labs(title="Posterior Decline Rate of Test Data", x="$\beta_{Date}$", y="Density", fill="Facility")# +
ggplotly(g2, tooltip=c('facility', 'value'))
g2 = ggplot(outframe %>% filter(variable=="beta_date") %>% filter(facility %in% special_wells), aes(x=value, fill=facility)) +
geom_density(alpha=0.5, color=NA) +labs(title="Posterior Decline Rate of Test Data", x="$\\beta_{Date}$", y="Density", fill="Facility")# +
ggplotly(g2, tooltip=c('facility', 'value'))
g2 = ggplot(outframe %>% filter(variable=="beta_date") %>% filter(facility %in% special_wells), aes(x=value, fill=facility)) +
geom_density(alpha=0.5, color=NA) +labs(title="Posterior Decline Rate of Test Data", x=TeX("$\\beta_{Date}$"), y="Density", fill="Facility")# +
ggplotly(g2, tooltip=c('facility', 'value'))
g2
g1; g2
# for over-plotting
special_wells = c('wk124', 'wk242', 'wk263', 'wk270', 'wk271')
g1 = ggplot(outframe %>% filter(facility %in% well_names, variable=="mf_pred", value>0), aes(x=value, fill=facility)) +
geom_density(alpha=0.5, color=NA) + xlim(0, NA) +
labs(title="Posterior Well Mass Flows for 2018", x="Mass flow", y="Density", fill="Facility") +
ggsave('../media/mf_wells.png', width=6, height=4, units='in')
g2 = ggplot(outframe %>% filter(variable=="beta_date") %>% filter(facility %in% special_wells), aes(x=value, fill=facility)) +
geom_density(alpha=0.5, color=NA) +labs(title="Posterior Decline Rate of Test Data", x=TeX("$\\beta_{Date}$"), y="Density", fill="Facility")# +
ggsave('../media/beta_date.png', width=6, height=4, units='in')
g3 = ggplot(outframe %>% filter(facility %in% fp_names, variable=="mf_pred", value>0), aes(x=value, fill=facility)) +
geom_density(aes(y=..scaled..), alpha=0.5, color=NA) + xlim(0, NA) +
labs(title="Posterior Flash Plant Mass Flows for 2018", x="Mass flow")
g4 = ggplot(outframe %>% filter(facility %in% gen_names, variable=="mf_pred", value>0), aes(x=value, fill=facility)) +
geom_density(aes(y=..scaled..), alpha=0.5, color=NA) + xlim(0, NA) +
labs(title="Posterior Generator Mass Flows for 2018", x="Mass flow", y="Scaled density", fill="Facility") +
ggsave('../media/mf_gens.png', width=6, height=4, units='in')
g5 = ggplot(outframe %>% filter(facility %in% gen_names, variable=="power", value>0), aes(x=value, fill=facility)) +
geom_density(aes(y=..scaled..), alpha=0.5, color=NA) + xlim(0, NA) +
labs(title="Posterior Generator Power Output for 2018", x="Power", y="Scaled density", fill="Facility") +
ggsave('../media/power_gens.png', width=6, height=4, units='in')
tb6 <- outframe %>% filter(variable=="sd") %>% select(facility, value) %>%
mutate(well=factor(facility)) %>%
group_by(well) %>%
summarise(Mean = mean(value),
`Lower 2.5%` = quantile(value, 0.025),
`Upper 97.5%` = quantile(value, 0.975)) %>%
mutate_if(is.numeric, round, 3) %>%
inner_join(regression_df %>% mutate(well=factor(names(ids)[well_id])) %>% group_by(well) %>% summarise(n=n()))
g6 = ggplot(outframe %>% filter(variable=="sd") %>% filter(facility %in% special_wells), aes(x=value, fill=facility)) +
geom_density(alpha=0.5, color=NA) + coord_cartesian(xlim=c(0, max(tb6$`Upper 97.5%`))) +
labs(title="Posterior Flow Deviation Estimates", x="Standard deviation", y="Density", fill="Facility") +
ggsave('../media/standard_deviation.png', width=6, height=4, units='in')
# ggplotly(g1, tooltip=c('facility', 'value'))
# ggplotly(g2, tooltip=c('facility', 'value'))
# ggplotly(g3, tooltip=c('facility', 'value'))
# ggplotly(g4, tooltip=c('facility', 'value'))
# ggplotly(g5, tooltip=c('facility', 'value'))
# ggplotly(g6, tooltip=c('facility', 'value'))
g1; g2; g3; g4; g5; g6
tb2 <- outframe %>% filter(variable=="beta_date") %>% select(facility, value) %>%
mutate(well=factor(facility)) %>%
group_by(well) %>%
summarise(Mean = mean(value),
`Lower 2.5%` = quantile(value, 0.025),
`Upper 97.5%` = quantile(value, 0.975)) %>%
mutate_if(is.numeric, round, 3) %>%
inner_join(regression_df %>% mutate(well=factor(names(ids)[well_id])) %>% group_by(well) %>% summarise(n=n()))
tb2[tb2$well %in% special_wells,] %>% knitr::kable()
tb6[tb6$well %in% special_wells,] %>% knitr::kable()
fp_constants
code = "
data {
whp_c <- whp - mean(whp)
whp_c_prod <- whp_prod - mean(whp)
whp_c_pred <- whp_pred - mean(whp)
}
model {
#######################################
# fit individual regressions to wells #
#######################################
for (i in 1:length(whp)) {
# elliptic
# mu2[i] <- beta_whp[well_id[i]] * whp[i]^2 + beta_date[well_id[i]] * date_numeric[i]^2
# mu2[i] <- beta_date[well_id[i]]*date_numeric[i] * sqrt(max(Intercept[well_id[i]]-beta_whp[well_id[i]]*whp[i]^2, 0)) + (beta_date[well_id[i]]*date_numeric[i])^2 + Intercept[well_id[i]]-beta_whp[well_id[i]]*whp[i]^2
# mu[i] <- sqrt(max(mu2[i], 0))
# exponential
# mu[i] <- beta_whp[well_id[i]] * (Intercept[well_id[i]] - whp[i]^2) ^ beta_date[well_id[i]]
# quadratic
# mu[i] <- Intercept[well_id[i]] + beta_whp[well_id[i]] * whp_c[i] + beta_whp2[well_id[i]] * whp_c[i]^2 + beta_date[well_id[i]] * date_numeric[i] * measurement_error_factor
# linear
mu[i] <- Intercept[well_id[i]] + beta_whp[well_id[i]] * whp_c[i] + beta_date[well_id[i]] * date_numeric[i]
mf[i] ~ dnorm(mu[i], tau[well_id[i]])
mf_fit[i] ~ dnorm(mu[i], tau[well_id[i]])
}
measurement_error_factor ~ dunif(0.9, 1.1)
# HIERARCHICAL
# fills in for any missing wells
for (j in well_ids) {
Intercept[j] ~ dnorm(mu_Intercept, tau_Intercept)
beta_whp[j] ~ dnorm(mu_beta_whp, tau_beta_whp)
# beta_whp2[j] ~ dnorm(mu_beta_whp2, tau_beta_whp2)
beta_date[j] ~ dnorm(mu_beta_date, tau_beta_date)
tau[j] ~ dgamma(1e-12, 1e-12)
sd[j] <- 1/sqrt(tau[j])
}
# fill in any missing dates
for (i in 1:length(whp)) {
date_numeric[i] ~ dnorm(mu_date_numeric, tau_date_numeric)
}
mu_date_numeric ~ dnorm(0, 1e-12)
tau_date_numeric ~ dnorm(1e-12, 1e-12)
# set hyperparameters
mu_Intercept ~ dnorm(0, 1e-12)
mu_beta_whp ~ dnorm(0, 1e-12)
# mu_beta_whp2 ~ dnorm(0, 1e-12)
mu_beta_date ~ dnorm(0, 1e-12)
tau_Intercept ~ dgamma(1e-12, 1e-12)
tau_beta_whp ~ dgamma(1e-12, 1e-12)
# tau_beta_whp2 ~ dgamma(1e-12, 1e-12)
tau_beta_date ~ dgamma(1e-12, 1e-12)
#####################################
# production curve for verification #
#####################################
for (i in 1:length(whp_prod)) {
# elliptic
# mf_prod2[i] <- beta_whp[well_id_prod[i]] * whp_c_prod[i]^2 + beta_date[well_id_prod[i]] * today_numeric^2
# mf_prod[i] <- sqrt(max(mf_prod2[i], 0)) + Intercept[well_id_prod[i]]
# mf_prod2[i] <- beta_date[well_id_prod[i]]*today_numeric * sqrt(max(Intercept[well_id_prod[i]]-beta_whp[well_id_prod[i]]*whp_c_prod[i]^2, 0)) + (beta_date[well_id[i]]*today_numeric)^2 + Intercept[well_id[i]]-beta_whp[well_id_prod[i]]*whp_c_prod[i]^2
# mf_prod[i] <- sqrt(max(mf_prod2[i], 0))
# exponential
# mf_prod[i] <- beta_whp[well_id_prod[i]] * (Intercept[well_id_prod[i]] - whp_c_prod[i]^2) ^ beta_date[well_id_prod[i]]
# quadratic
# mf_prod[i] <- Intercept[well_id_prod[i]] + beta_whp[well_id_prod[i]] * whp_c_prod[i] + beta_whp2[well_id_prod[i]] * whp_c_prod[i]^2 + beta_date[well_id_prod[i]] * today_numeric
# linear
mf_prod[i] <- Intercept[well_id_prod[i]] + beta_whp[well_id_prod[i]] * whp_c_prod[i] + beta_date[well_id_prod[i]] * today_numeric
}
######################################################
# simple model to fill in missing enthalpy constants #
######################################################
for (i in fp_ids) {
# missing fp constants
hf_ip[i] ~ dgamma(param[1], param[7])
hg_ip[i] ~ dgamma(param[2], param[8])
hfg_ip[i] ~ dgamma(param[3], param[9])
hf_lp[i] ~ dgamma(param[4], param[10])
hg_lp[i] ~ dgamma(param[5], param[11])
hfg_lp[i] ~ dgamma(param[6], param[12])
}
for (i in c(1, well_ids)) { h[i] ~ dgamma(param[13], param[14]) } # missing well constants
for (i in 1:14) { param[i] ~ dgamma(1e-12, 1e-12) }                 # uniform priors
########################################
# make predictions (the stuff we want) #
########################################
mf_pred[dummy] <- 0  # dummy well
ip_sf[dummy] <- 0
lp_sf[dummy] <- 0
wf[dummy] <- 0
for (i in well_ids) {
# elliptic
# mf_pred2[i] <- beta_whp[i] * whp_c_pred[i]^2 + beta_date[i] * today_numeric^2
# mf_pred[i] <- sqrt(max(mf_pred2[i], 0)) + Intercept[i]
# mf_pred2[i] <- beta_date[i]*today_numeric * sqrt(max(Intercept[i]-beta_whp[i]*whp_c_pred[i]^2, 0)) + (beta_date[i]*today_numeric)^2 + Intercept[i]-beta_whp[i]*whp_c_pred[i]^2
# mf_pred[i] <- sqrt(max(mf_pred2[i], 0))
# exponential
# mf_pred[i] <- beta_whp[i] * (Intercept[i] - whp_c_pred[i]^2) ^ beta_date[i]
# quadratic
# mf_pred[i] <- Intercept[i] + beta_whp[i] * whp_c_pred[i] + beta_whp2[i] * whp_c_pred[i]^2 + beta_date[i] * today_numeric
# linear
mf_pred[i] <- Intercept[i] + beta_whp[i] * whp_c_pred[i] + beta_date[i] * today_numeric
}
for (i in fp_ids) {
mf_pred[i] <- sum(mf_pred[m[i,1:n_inflows[i]]])
h[i] <- sum(mf_pred[m[i, 1:n_inflows[i]]] * h[m[i, 1:n_inflows[i]]]) / ifelse(mf_pred[i]!=0, mf_pred[i], 1)
ip_sf[i] <- (h[i] - hf_ip[i]) / hfg_ip[i] * mf_pred[i]
lp_sf[i] <- (hf_ip[i] - hf_lp[i]) / hfg_lp[i] * (mf_pred[i] - ip_sf[i])
total_sf[i] <- ip_sf[i] + lp_sf[i]
wf[i] <- total_sf[i]
}
# dummy gens and actual gens
for (i in ip_gen_ids) { mf_pred[i] <- sum(ip_sf[m[i, 1:n_inflows[i]]]) }
for (i in lp_gen_ids) { mf_pred[i] <- sum(lp_sf[m[i, 1:n_inflows[i]]]) }
for (i in w_gen_ids) { mf_pred[i] <- sum(wf[m[i, 1:n_inflows[i]]]) }
for (i in gen_ids) {
mf_pred[i] <- sum(mf_pred[m[i,1:n_inflows[i]]])
power[i] <- mf_pred[i] / mu_factor[i]
mu_factor[i] ~ dunif(0.95*factor[i], 1.05*factor[i])  # uncertainty from email
}
total_power <- sum(power[gen_ids])
}
"
vars =  c(paste0('mf_fit[', 1:length(data$whp), ']'),
paste0('mf_pred[', 2:length(data$mf_pred), ']'),
paste0('beta_date[', data$well_ids, ']'),
paste0('sd[', data$well_ids, ']'),
paste0('power[', gen_ids, ']'),
paste0('h[', fp_ids, ']'),
paste0('mf_prod[', 1:length(data$whp_prod), ']'),
paste0('total_sf[', data$fp_ids, ']'),
'total_power',
paste0('mu_', c('Intercept', 'beta_whp', 'beta_date')))
n_chains = 2
burn_in = 500
n_steps = 5000
model = jags.model(textConnection(code), data, n.chains=n_chains)
update(model, burn_in)
out = coda.samples(model, n.iter=round(n_steps/n_chains), variable.names=vars)
outmatrix = as.matrix(out)
outframe = as.data.frame(outmatrix) %>%
gather(key=facility, value=value) %>%
mutate(variable=gsub("\\[.*$", "", facility), facility=parse_number(facility, na=c("NA")))
outframe$facility = names(ids)[outframe$facility]
sf.df <- outframe %>% filter(str_detect(variable, "total_sf"))
head(sf.df)
sf.df <- outframe %>% filter(str_detect(variable, "total_sf") & value > 0)
head(sf.df)
ggplot(sf.df, aes(x=value, color=facility)) +
geom_density()
ggplot(sf.df, aes(x=value, fill=facility)) +
geom_density()
ggplot(sf.df, aes(x=value, fill=facility)) +
geom_density(color=NA, alpha=0.5)
head(fp_constants)
limits = fp_constants %>%
mutate(fp = names(ids)[fp_id]) %>%
select(fp, limit) %>%
ggplot(sf.df, aes(x=value, fill=facility)) +
geom_density(color=NA, alpha=0.5) +
geom_vline()
limits = fp_constants %>%
mutate(fp = names(ids)[fp_id]) %>%
select(fp, limit)
limits
limits = fp_constants %>%
mutate(fp = names(ids)[fp_id]) %>%
select(fp, limit) %>%
drop_na()
limits
limits = fp_constants %>%
mutate(facility = names(ids)[fp_id]) %>%
select(facility, limit) %>%
drop_na()
ggplot(sf.df, aes(x=value, fill=facility)) +
geom_density(color=NA, alpha=0.5) +
geom_vline(data=limits)
ggplot(sf.df, aes(x=value, fill=facility)) +
geom_density(color=NA, alpha=0.5) +
geom_vline(data=limits, aes(xintercept=limit))
ggplot(sf.df, aes(x=value, fill=facility)) +
geom_density(color=NA, alpha=0.5) +
geom_vline(data=limits, aes(xintercept=limit, color=facility))
ggplot(sf.df, aes(x=value, color=facility, fill=facility)) +
geom_density(color=NA, alpha=0.5) +
geom_vline(data=limits, aes(xintercept=limit, color=facility))
ggplot(sf.df, aes(x=value, color=facility, fill=facility)) +
geom_density(color=NA, alpha=0.5) +
geom_vline(data=limits, aes(xintercept=limit))
sf.df <- outframe %>% filter(str_detect(variable, "total_sf") & value > 0)
limits = fp_constants %>%
mutate(facility = names(ids)[fp_id]) %>%
select(facility, limit) %>%
drop_na()
ggplot(sf.df, aes(x=value, fill=facility)) +
geom_density(color=NA, alpha=0.5) +
geom_vline(data=limits, aes(xintercept=limit, color=facility)) +
labs(x="Steam flow (T/h)", y="Density", fill="Flash plant", color="Steam flow limit")
sf.df <- outframe %>% filter(str_detect(variable, "total_sf") & value > 0)
limits = fp_constants %>%
mutate(facility = names(ids)[fp_id]) %>%
select(facility, limit) %>%
drop_na()
ggplot(sf.df, aes(x=value, fill=facility)) +
geom_density(aes(y=..scaled..), color=NA, alpha=0.5) +
geom_vline(data=limits, aes(xintercept=limit, color=facility)) +
labs(x="Steam flow (T/h)", y="Density", fill="Flash plant", color="Steam flow limit") +
ggsave('../media/constraints.png', width=6, height=4, units='in')
ggplot(sf.df, aes(x=value)) +
facet_grid(facility~.) +
geom_density(aes(y=..scaled..), color=NA, alpha=0.5) +
geom_vline(data=limits, aes(xintercept=limit, color=facility)) +
labs(x="Steam flow (T/h)", y="Density", fill="Flash plant", color="Steam flow limit") +
ggsave('../media/constraints.png', width=6, height=4, units='in')
ggplot(sf.df, aes(x=value, fill=facility)) +
facet_grid(facility~.) +
geom_density(aes(y=..scaled..), color=NA, alpha=0.5) +
geom_vline(data=limits, aes(xintercept=limit, color=facility)) +
labs(x="Steam flow (T/h)", y="Density", fill="Flash plant", color="Steam flow limit") +
ggsave('../media/constraints.png', width=6, height=4, units='in')
ggplot(sf.df, aes(x=value, fill=facility)) +
facet_grid(facility~., scales = "free_y") +
geom_density(color=NA, alpha=0.5) +
geom_vline(data=limits, aes(xintercept=limit, color=facility)) +
labs(x="Steam flow (T/h)", y="Density", fill="Flash plant", color="Steam flow limit") +
ggsave('../media/constraints.png', width=6, height=4, units='in')
ggplot(sf.df, aes(x=value, fill=facility)) +
facet_grid(facility~., scales = "free_y", switch="y") +
geom_density(color=NA, alpha=0.5) +
geom_vline(data=limits, aes(xintercept=limit, color=facility)) +
labs(x="Steam flow (T/h)", y="Density", fill="Flash plant", color="Steam flow limit") +
ggsave('../media/constraints.png', width=6, height=4, units='in')
fit = as.data.frame(outmatrix) %>%
select(contains('mf_fit')) %>%
gather(key='index', value='fitted') %>%
mutate(index=as.integer(parse_number(index))) %>%
group_by(index) %>%
summarise(lower=quantile(fitted, 0.025),
upper=quantile(fitted, 0.975),
Fitted=mean(fitted),
std=sd(fitted)) %>%
cbind(regression_df) %>%
mutate(`Standardised residual` = (Fitted-mf)/std,
Well = factor(names(ids[well_id])),
Observed = mf) %>%
gather(key="key", value="value", `Standardised residual`, Observed, )
ggplot(fit, aes(x=Fitted, y=value)) +
geom_point(aes(color=Well, shape=Well)) + scale_shape_manual(values = 1:length(levels(fit$Well))) +
geom_smooth(color='black') +
facet_grid(key~., scales="free_y", switch="y") +
geom_hline(data=data.frame(key="Standardised residual", value=c(1.96,-1.96)), aes(yintercept=value), color='red') +
labs(title="Diagnostic Plots", x="Fitted mass flow (T/h)", y="") +
ggsave('../media/diagnostics.png', width=6, height=4, units='in')
# for over-plotting
special_wells = c('wk124', 'wk242', 'wk263', 'wk270', 'wk271')
g1 = ggplot(outframe %>% filter(facility %in% well_names, variable=="mf_pred", value>0), aes(x=value, fill=facility)) +
geom_density(alpha=0.5, color=NA) + xlim(0, NA) +
labs(title="Posterior Well Mass Flows for 2018", x="Mass flow (T/h)", y="Density", fill="Facility") +
ggsave('../media/mf_wells.png', width=6, height=4, units='in')
g2 = ggplot(outframe %>% filter(variable=="beta_date") %>% filter(facility %in% special_wells), aes(x=value, fill=facility)) +
geom_density(alpha=0.5, color=NA) +labs(title="Posterior Decline Rate of Test Data", x=TeX("$\\beta_{Date}$ (T/h/Bar)"), y="Density", fill="Facility") +
ggsave('../media/beta_date.png', width=6, height=4, units='in')
g3 = ggplot(outframe %>% filter(facility %in% fp_names, variable=="mf_pred", value>0), aes(x=value, fill=facility)) +
geom_density(aes(y=..scaled..), alpha=0.5, color=NA) + xlim(0, NA) +
labs(title="Posterior Flash Plant Mass Flows for 2018", x="Mass flow (T/h)") +
ggsave('../media/mf_fps.png', width=6, height=4, units='in')
g4 = ggplot(outframe %>% filter(facility %in% gen_names, variable=="mf_pred", value>0), aes(x=value, fill=facility)) +
geom_density(aes(y=..scaled..), alpha=0.5, color=NA) + xlim(0, NA) +
labs(title="Posterior Generator Mass Flows for 2018", x="Mass flow (T/h)", y="Scaled density", fill="Facility") +
ggsave('../media/mf_gens.png', width=6, height=4, units='in')
g5 = ggplot(outframe %>% filter(facility %in% gen_names, variable=="power", value>0), aes(x=value, fill=facility)) +
geom_density(aes(y=..scaled..), alpha=0.5, color=NA) + xlim(0, NA) +
labs(title="Posterior Generator Power Output for 2018", x="Power (MW)", y="Scaled density", fill="Facility") +
ggsave('../media/power_gens.png', width=6, height=4, units='in')
tb6 <- outframe %>% filter(variable=="sd") %>% select(facility, value) %>%
mutate(well=factor(facility)) %>%
group_by(well) %>%
summarise(Mean = mean(value),
`Lower 2.5%` = quantile(value, 0.025),
`Upper 97.5%` = quantile(value, 0.975)) %>%
mutate_if(is.numeric, round, 3) %>%
inner_join(regression_df %>% mutate(well=factor(names(ids)[well_id])) %>% group_by(well) %>% summarise(n=n()))
g6 = ggplot(outframe %>% filter(variable=="sd") %>% filter(facility %in% special_wells), aes(x=value, fill=facility)) +
geom_density(alpha=0.5, color=NA) + coord_cartesian(xlim=c(0, max(tb6$`Upper 97.5%`))) +
labs(title="Posterior Flow Deviation Estimates", x="Standard deviation", y="Density", fill="Facility") +
ggsave('../media/standard_deviation.png', width=6, height=4, units='in')
# ggplotly(g1, tooltip=c('facility', 'value'))
# ggplotly(g2, tooltip=c('facility', 'value'))
# ggplotly(g3, tooltip=c('facility', 'value'))
# ggplotly(g4, tooltip=c('facility', 'value'))
# ggplotly(g5, tooltip=c('facility', 'value'))
# ggplotly(g6, tooltip=c('facility', 'value'))
g1; g2; g3; g4; g5; g6
